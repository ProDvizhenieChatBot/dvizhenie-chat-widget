import React, { useState, useEffect, useMemo, useCallback } from 'react'

import { useScenario, type ScenarioStep } from '../../hooks/useScenario'
import {
  safeAsync,
  handleSubmissionError,
  telegramErrorHandler,
  defaultErrorHandler,
  type ErrorHandler,
} from '../../utils/errorHandling'
import { type MessageButton } from '../Message'
import MessagesList from '../MessagesList'
import WidgetHeader from '../WidgetHeader'
import WidgetInput from '../WidgetInput'

import styles from './styles.module.css'

export interface WidgetWindowProps {
  onClose: () => void
  isFullscreen?: boolean
}

interface ChatMessage {
  id: string
  text: string
  isBot: boolean
  buttons?: MessageButton[]
}

export const WidgetWindow: React.FC<WidgetWindowProps> = ({ onClose, isFullscreen = false }) => {
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [isProcessingButton, setIsProcessingButton] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const { currentStep, handleUserAnswer, isComplete, restart, answers } = useScenario()

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
  const errorHandler: ErrorHandler = useMemo(() => {
    return typeof window !== 'undefined' && window.Telegram?.WebApp
      ? telegramErrorHandler
      : defaultErrorHandler
  }, [])

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
  const getPlaceholderForStep = useCallback((step: ScenarioStep): string => {
    switch (step.type) {
      case 'email':
        return '–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å'
      case 'phone':
        return '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      case 'date':
        return '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)'
      case 'link':
        return '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É'
      default:
        return '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ Enter'
    }
  }, [])

  const handleFormSubmit = useCallback(
    async (data: Record<string, string>) => {
      console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', data)

      const submitData = async () => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
        if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
          const tgWebApp = window.Telegram.WebApp

          // –í Telegram WebApp –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–æ—Ç–∞
          if (tgWebApp.sendData) {
            tgWebApp.sendData(
              JSON.stringify({
                type: 'form_submission',
                data: data,
                timestamp: new Date().toISOString(),
              }),
            )

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            tgWebApp.showAlert('–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.', () => {
              tgWebApp.close()
            })
          } else {
            throw new Error('Telegram WebApp sendData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
          }
        } else {
          // –í –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          alert('–î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')
        }
      }

      const result = await safeAsync(submitData, (error) => {
        const submissionError = handleSubmissionError(error)
        errorHandler(submissionError)
        setError(submissionError.message)
      })

      if (!result) {
        // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ errorHandler
        return
      }
    },
    [errorHandler],
  )

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
  useEffect(() => {
    if (isComplete) {
      handleFormSubmit(answers)
    }
  }, [isComplete, answers, handleFormSubmit])

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —à–∞–≥–∞
  useEffect(() => {
    if (currentStep) {
      const botMessage: ChatMessage = {
        id: `bot-${currentStep.id}-${Date.now()}`,
        text: currentStep.text,
        isBot: true,
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ —à–∞–≥ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
      if (currentStep.type === 'buttons' && currentStep.options) {
        botMessage.buttons = currentStep.options.map((option, index) => ({
          id: `${currentStep.id}-option-${index}`,
          text: option,
          action: 'select_option',
          value: option,
        }))
      }

      setMessages((prev) => [...prev, botMessage])
    }
  }, [currentStep])

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
  const handleButtonClick = useCallback(
    (button: MessageButton) => {
      if (isProcessingButton) return

      setIsProcessingButton(true)

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage: ChatMessage = {
        id: `user-${Date.now()}`,
        text: button.text,
        isBot: false,
      }
      setMessages((prev) => [...prev, userMessage])

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Ö—É–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
      setTimeout(() => {
        if (typeof button.value === 'string') {
          handleUserAnswer(button.value)
        }
        setIsProcessingButton(false)
      }, 500)
    },
    [isProcessingButton, handleUserAnswer],
  )

  const onSend = useCallback(
    (message: string) => {
      if (!message.trim() || !currentStep) return

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥
      const inputTypes = ['input', 'date', 'phone', 'email']
      if (!inputTypes.includes(currentStep.type)) return

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userMessage: ChatMessage = {
        id: `user-${Date.now()}`,
        text: message,
        isBot: false,
      }
      setMessages((prev) => [...prev, userMessage])

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      handleUserAnswer(message)
    },
    [currentStep, handleUserAnswer],
  )

  const onFileUpload = useCallback(
    (files: FileList) => {
      const fileNames = Array.from(files)
        .map((file) => file.name)
        .join(', ')
      onSend(`üìé –§–∞–π–ª—ã: ${fileNames}`)
    },
    [onSend],
  )

  const onVoiceRecord = useCallback(() => {
    console.log('Voice recording not implemented yet')
  }, [])

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  const lastBotMessageIndex = useMemo(() => {
    return (
      messages
        .map((msg, idx) => (msg.isBot && msg.buttons ? idx : -1))
        .filter((idx) => idx !== -1)
        .pop() ?? -1
    )
  }, [messages])

  // –û–±–æ–≥–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ MessagesList
  const enrichedMessages = useMemo(() => {
    return messages.map((message, index) => ({
      ...message,
      isProcessingButton,
      onButtonClick:
        message.isBot && message.buttons && index === lastBotMessageIndex
          ? handleButtonClick
          : undefined,
    }))
  }, [messages, isProcessingButton, lastBotMessageIndex, handleButtonClick])

  if (isComplete) {
    return (
      <div className={`${styles.widgetWindow} ${isFullscreen ? styles.fullscreen : ''}`}>
        <WidgetHeader onClose={onClose} hideCloseButton={isFullscreen} />
        <div className={styles.complete}>
          <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! üéâ</h3>
          <p>–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ —Ñ–æ–Ω–¥.</p>
          <button onClick={restart} className={styles.restartButton}>
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className={`${styles.widgetWindow} ${isFullscreen ? styles.fullscreen : ''}`}>
      <WidgetHeader onClose={onClose} hideCloseButton={isFullscreen} />
      {error && (
        <div className={styles.errorBanner}>
          <span>{error}</span>
          <button
            onClick={() => setError(null)}
            className={styles.errorClose}
            aria-label="–ó–∞–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É"
          >
            √ó
          </button>
        </div>
      )}
      <MessagesList messages={enrichedMessages} />
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —à–∞–≥–æ–≤ —Å –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞ */}
      {currentStep && ['input', 'date', 'phone', 'email', 'link'].includes(currentStep.type) && (
        <WidgetInput
          isFullscreen={isFullscreen}
          stepType={currentStep.type}
          placeholder={getPlaceholderForStep(currentStep)}
          onSend={onSend}
          onFileUpload={onFileUpload}
          onVoiceRecord={onVoiceRecord}
        />
      )}
    </div>
  )
}

export default WidgetWindow
